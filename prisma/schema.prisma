generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  OWNER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?    @default(now())
  imageProfile  String?
  password      String
  role          Role         @default(MEMBER)
  forum         Forum[]
  blog          Blog[]
  member        Member?
  owner         Owner?
  like          Like[]
  dislike       DisLike[]
  notifikasi    Notifikasi[]
  comment       Comment[]
  image         Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id        String      @id @default(cuid())
  userId    String      @unique
  gender    String?
  reservasi Reservasi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Owner {
  id        String     @id @default(cuid())
  userId    String     @unique
  destinasi Destinasi?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Forum {
  id      String    @id @default(uuid())
  userId  String
  title   String
  slug    String
  content String[]
  like    Like[]
  dislike DisLike[]
  comment Comment[]
  image   Image?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id      String   @id @default(uuid())
  userId  String
  title   String
  slug    String
  content String[]
  image   Image?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservasi {
  id               String    @id @default(uuid())
  memberId         String
  destinasiId      String
  namaUser         String
  nomorTelfon      String
  jumlahOrang      Int       @default(1)
  status           String    @default("diproses") //dibatalkan selesai menunggu_pembayaran
  tanggalReservasi DateTime  @default(now())
  hargaPembayaran  BigInt
  member           Member?   @relation(fields: [memberId], references: [id])
  destinasi        Destinasi @relation(fields: [destinasiId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Destinasi {
  id             String   @id @default(uuid())
  ownerId        String   @unique
  namaDestinasi  String
  harga          Int
  deskripsi      String
  alamat         String
  nomorOwner     String
  kategoriLokasi String
  jamOprasional  String
  fasilitas      String[]
  buka           Boolean  @default(false)

  image     Image?
  owner     Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Reservasi Reservasi[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  forumId   String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DisLike {
  id        String   @id @default(uuid())
  forumId   String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  forumId   String   @unique
  userId    String   @unique
  pesan     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifikasi {
  id        String   @id @default(uuid())
  userId    String   @unique
  pesan     String   @default("Ada Pesan Baru!")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String @id @default(uuid())
  userId      String @unique
  forumId     String @unique
  blogId      String @unique
  destinasiId String @unique
  namaFoto    String
  gambar      String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  blog      Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  destinasi Destinasi @relation(fields: [destinasiId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
